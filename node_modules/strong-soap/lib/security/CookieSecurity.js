'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Security = require('./security');

function hasCookieHeader(cookie) {
  return (typeof cookie === 'undefined' ? 'undefined' : _typeof(cookie)) === 'object' && cookie.hasOwnProperty('set-cookie');
}

/*
 * Accepts either a cookie or lastResponseHeaders
 */

var CookieSecurity = function (_Security) {
  _inherits(CookieSecurity, _Security);

  function CookieSecurity(cookie, options) {
    _classCallCheck(this, CookieSecurity);

    var _this = _possibleConstructorReturn(this, (CookieSecurity.__proto__ || Object.getPrototypeOf(CookieSecurity)).call(this, options));

    cookie = hasCookieHeader(cookie) ? cookie['set-cookie'] : cookie;

    _this.cookie = (Array.isArray(cookie) ? cookie : [cookie]).map(function (c) {
      return c.split(';')[0];
    }).join('; ');
    return _this;
  }

  _createClass(CookieSecurity, [{
    key: 'addHttpHeaders',
    value: function addHttpHeaders(headers) {
      headers.Cookie = this.cookie;
    }
  }]);

  return CookieSecurity;
}(Security);

module.exports = CookieSecurity;